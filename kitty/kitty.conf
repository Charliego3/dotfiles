# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{
font_family      MonoLisa Nerd Font
bold_font        MonoLisa Nerd Font
italic_font      MonoLisa Nerd Font
bold_italic_font MonoLisa Nerd Font

# 字体大小
font_size 13.0

# kitty不支持BIDI（双向文本），然而，对于RTL脚本，单词会自动显示在RTL中。也就是说，在RTL脚本中，“你好世界”在小猫中显示为“你好世界”，如果您尝试选择RTL形状字符串的子字符串，您将获得如果字符串是LTR的字符。例如，假设希伯来语单词ייוויי，选择屏幕上出现的字符实际上是将字符י写入选择缓冲区。
# kitty的默认行为与过滤器一起可以逆转字序非常有用，但是，如果您希望操作RTL字形，使用它可能非常具有挑战性，因此提供了此选项来关闭它。此外，此选项可以与命令行程序GNU FriBidi一起使用，以获得BIDI支持，因为它将迫使小猫始终将文本视为LTR，FriBidi期望终端使用LTR。
# force_ltr no

# 更改每个字符单元格小猫渲染的大小。您可以使用任何一个数字，它们被解释为像素或百分比（数字后面跟着%），它们被解释为未修改值的百分比。您可以使用负像素或低于100%的百分比来缩小尺寸（但这可能会导致渲染失真）。
adjust_line_height  0
adjust_column_width 0

# 将指定的unicode代码点映射到特定字体。
# 如果您需要对某些符号（例如电力线）进行特殊渲染，则很有用。
# 避免使用修补字体。 每个unicode代码点以U + <十六进制代码点>的形式指定。
# 您可以指定多个代码点，以逗号分隔，范围以连字符分隔。 symbol_map本身可以多次指定。
# 语法是：symbol_map codepoints Font Family Name
#symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 JetBrainsMono Nerd Font
symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 MonoLisa Nerd Font

# 选择您要如何处理多字符连字。 默认设置是始终渲染它们。
# 您可以使用光标使编辑更容易，告诉kitty光标在光标上方时不要渲染它们，或者如果您不喜欢kitty，则始终使用kitty永远不要渲染kitty。 
# 可以使用kitty远程控制工具或通过在kitty.conf中为其定义快捷方式来设置每个窗口的连字策略
disable_ligatures never
# 例如：
#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

# 准确选择要启用或禁用的OpenType功能。 这很有用，因为某些字体可能在终端中具有值得使用的功能。 
# 例如，Fira Code Retina包含一个可自由选择的功能零，该功能以该字体更改了零（0）的外观，以使其更容易与Ø区分。
# Fira Code Retina还包括称为标记集的其他任意功能，其特征为ss01至ss20。
font_features JetBrainsMono-Medium +zero +onum +calt +isol +medi +fina +init
#font_features MonoLisa +zero +onum +calt +isol +medi +fina +init

# 更改用于绘制单码字符的框的行的大小。这些值以pts为单位。
# 它们将由监视器DPI缩放，以达到像素值。细线、直线线、直线线、粗线、非常粗线必须有四个值对应。
box_drawing_scale 0.001, 1, 1.5, 2

#: }}}

#: Cursor customization {{{
# 光标颜色
cursor #cccccc

# 光标下选择下文本的颜色
cursor_text_color #111111

# 光标形状, 可以是: 块状(block), 光束(beam), 下划线(underline)之一
cursor_shape block

# 光束光标的宽度
cursor_beam_thickness 1.5

# 下划线光标厚度
cursor_underline_thickness 2.0

# 闪烁光标的间隔(以秒为单位), 设置为零以禁用闪烁, 负值意味着使用系统默认值。注意: 小于`repaint_delay`的数字将限于`repaint_delay`
cursor_blink_interval -1

# 在键盘不活动数秒后, 停止光标闪烁。设置为零, 永不停止
cursor_stop_blinking_after 15.0

#: }}}

#: Scrollback {{{

# 回滚
# 历史记录行数, 用于回滚。内存是按需分配的。负数表示无限回滚。注意: 不建议使用非常大的回滚，这将导致使用非常大的内存
# 并且会减慢终端的性能，相反的可以考虑使用`scrollback_pager`
scrollback_lines 20000

# 在新窗口中查看回滚的程序。回滚缓冲区以STDIN形式传递给此程序。如果您更改它，请确保您使用的程序可以处理颜色和文本格式的ANSI转义序列。上面命令行中的INPUT_LINE_NUMBER将被一个整数取代，表示哪一行应该位于屏幕顶部。同样，CURSOR_LINE和CURSOR_COLUMN将被当前游标位置取代。
scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

# 单独的回滚历史记录大小，仅用于浏览回滚缓冲区（单位：MB）。此单独的缓冲区不适用于交互式滚动，但在单独的窗口中查看回滚缓冲区时，将管道传输到寻呼程序。当前实现将数据存储在UTF-8中，因此对于纯ASCII文本，对于纯ASCII文本，每兆字节约10,000行，每行100个字符。零或更少的值禁用此功能。最大允许尺寸为4GB。
scrollback_pager_history_size 10

# 修改鼠标滚轮滚动的值。请注意，这仅适用于低精度滚动设备，不用于macOS和Wayland等平台上的高精度滚动。使用负数来改变滚动方向。
# wheel_scroll_multiplier 5.0

# 修改触摸板滚动的值。请注意，这仅适用于 macOS 和 Wayland 等平台上的高精度滚动设备。使用负数来改变滚动方向。
# touch_scroll_multiplier 1.0

#: }}}

#: Mouse {{{

# mouse_hide_wait 0.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.

url_color #0087bd
url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

open_url_modifiers kitty_mod

#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL

# open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.

# url_prefixes http https file ftp

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

# detect_urls yes

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable.

# copy_on_select no

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, simply selecting text with the mouse will cause the text
#: to be copied to clipboard. Useful on platforms such as macOS that
#: do not have the concept of primary selections. You can instead
#: specify a name such as a1 to copy to a private kitty buffer
#: instead. Map a shortcut with the paste_from_buffer action to paste
#: from this private buffer. For example::

#:     map cmd+shift+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

# rectangle_select_modifiers ctrl+alt

#: The modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)

# terminal_select_modifiers shift

#: The modifiers to override mouse selection even when a terminal
#: application has grabbed the mouse

# select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the unicode database will be matched.

# click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around

# pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse. Valid values are: arrow, beam and hand

# default_pointer_shape beam

#: The default shape of the mouse pointer. Valid values are: arrow,
#: beam and hand

# pointer_shape_when_dragging beam

#: The default shape of the mouse pointer when dragging across text.
#: Valid values are: arrow, beam and hand

#: }}}

#: Performance tuning {{{

# repaint_delay 10

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate. Also, to minimize latency when there is pending input to be
#: processed, repaint_delay is ignored.

# input_delay 3

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

#: }}}

#: Terminal bell {{{

enable_audio_bell yes

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

# visual_bell_duration 0.0

#: Visual bell duration. Flash the screen when a bell occurs for the
#: specified number of seconds. Set to zero to disable.

# window_alert_on_bell yes

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.

# bell_on_tab yes

#: Show a bell symbol on the tab if a bell occurs in one of the
#: windows in the tab and the window is not the currently focused
#: window

# command_on_bell none

#: Program to run when a bell occurs.

#: }}}

# Window layout {{{

# 如果启用，将记住窗口大小，以便小猫的新实例与前一个实例具有相同的大小。
# 如果禁用，窗口最初的大小将由 initial_window_width/height 配置，以像素为单位。
# 您可以在宽度/高度值上使用“c”的后缀，将它们解释为单元格数而不是像素数。
remember_window_size  yes
initial_window_width  400
initial_window_height 200

# 启用的窗口布局。 以逗号分隔的布局名称列表。 特殊值all表示所有布局。 
# 列出的第一个布局将用作启动布局。 默认配置是所有布局按字母顺序排列。 
# Layouts: 
#     :Fat -- 一个（或可选多个）窗口在顶部显示全宽，其余窗口在底部并排显示
#     :Grid -- 所有窗口都显示在网格中
#     :Horizontal -- 所有窗口并排显示
#     :Splits -- Windows以使用水平和垂直拆分创建的任意模式排列
#     :Stack -- 一次只显示一个最大化窗口
#     :Tall -- 一个（或可选多个）窗口在左侧显示全高，其余窗口显示在右侧另一个窗口下方显示
#     :Vertical -- 所有窗口都显示在另一个下方
enabled_layouts *

# 调整窗口大小时要使用的步骤大小（单位为单元格宽度/单元格高度）。
# 单元格值用于水平调整大小，线值用于垂直调整大小。
window_resize_step_cells 2
window_resize_step_lines 2

# 窗口边框的宽度。可以是像素（px）或pts（pt）。pts中的值将根据屏幕分辨率四舍五入到最近的像素数。
# 如果没有指定，则假定该单位为pts。请注意，只有当多个窗口可见时，才会显示边框。它们旨在分隔多个窗口。
window_border_width 1pt

# 只画所需的最小边框。这意味着只绘制非活动窗口所需的最小边框。
# 这只是将不活跃的窗口与邻居分开的边界。请注意，设置非零窗口边距会覆盖这一点，并导致绘制所有边框。
draw_minimal_borders yes

# 窗口边缘（单位：pts）（边境外空白区域）。单个值设置所有四面。两个值设置垂直和水平边。
# 三个值设置顶部、水平和底部。设置顶部、右侧、底部和左侧四个值。
window_margin_width 0

# 仅显示单个窗口时要使用的窗口边距（以磅为单位）。 负值将导致使用window_margin_width的值代替。
# 单个值可设置所有四个面。 两个值设置垂直和水平边。 三个值分别设置为上，横向和下。 四个值分别设置为上，右，下和左。
single_window_margin_width -1

# 窗口填充（以pts为单位）（文本和窗口边框之间的空白区域）。
# 单个值设置所有四面。两个值设置垂直和水平边。三个值设置顶部、水平和底部。设置顶部、右侧、底部和左侧四个值。
window_padding_width 5 5 5 5

# 当窗口大小不是单元格大小的精确倍数时，终端窗口的单元格区域将在侧面上有一些额外的填充。
# 您可以使用此选项控制填充的分布方式。 使用中心值表示单元格区域将居中放置。 左上角的值表示填充将仅在底部和右侧边缘上。
placement_strategy center

# 活动窗口边框的颜色。将此设置为无，以不围绕活动窗口绘制边框。
active_border_color #008B45

# 不活动窗口边框颜色
inactive_border_color #008B8B

# 发生响铃的非活动窗口的边框颜色
bell_border_color #ff5a00

# 在非活动窗口中将文本淡出指定数量（数字介于0到1之间，零被完全淡出）。
inactive_text_alpha 1.0

# 使用yes隐藏窗口装饰（标题栏和窗口边框）。 在macOS上，titlebar-only 可用于仅隐藏标题栏。
# 这是否有效以及究竟产生什么效果取决于窗口管理器/操作系统。
hide_window_decorations titlebar-only

 收到大小事件时重新绘制屏幕前等待的时间（以秒为单位）。
# 在 macOS 等平台上，操作系统发送与调整大小开始和结束对应的事件，此数字将被忽略。
resize_debounce_time 0.1

# 选择在调整大小时小猫如何绘制窗口。 static值表示绘制当前窗口内容，大部分保持不变。
# 比例值表示按比例绘制当前窗口内容。 值为空白意味着绘制一个空白窗口。 size值表示以单元格显示窗口大小。
resize_draw_strategy static

# 以与单元格一样大的步长调整OS窗口的大小，而不是通常的像素精度。 
# 与单元格数量中的initial_window_width和initial_window_height结合使用时，此选项可用于在调整OS窗口大小时使边距尽可能小。
# 请注意，这目前在Wayland上不起作用。
resize_in_steps no

# 关闭操作系统窗口或选项卡中至少有这个数量的小猫窗口时，请请求确认。零的值禁用确认。
# 此确认也适用于退出整个应用程序的请求（所有操作系统窗口，通过退出操作）。
confirm_os_window_close 1

#map ctrl+h launch --location=hsplit
#map ctrl+v launch --location=vsplit
map F7 layout_action rotate

map shift+up move_window up
map shift+left move_window left
map shift+right move_window right
map shift+down move_window down

map ctrl+left neighboring_window left
map ctrl+right neighboring_window right
map ctrl+up neighboring_window up
map ctrl+down neighboring_window down

#: }}}

#: Tab bar {{{

tab_bar_edge top

#: Which edge to show the tab bar on, top or bottom

tab_bar_margin_width 2.0

#: The margin to the left and right of the tab bar (in pts)

# fade, slant, separator, powerline, custom, hidden
tab_bar_style hidden

tab_powerline_style angled

#: The tab bar style, can be one of: fade, separator, powerline, or
#: hidden. In the fade style, each tab's edges fade into the
#: background color, in the separator style, tabs are separated by a
#: configurable separator, and the powerline shows the tabs as a
#: continuous line. If you use the hidden style, you might want to
#: create a mapping for the select_tab action which presents you with
#: a list of tabs and allows for easy switching to a tab.

tab_bar_min_tabs 1

#: The minimum number of tabs that must exist before the tab bar is
#: shown

tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

tab_separator " ┇"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

tab_activity_symbol none

#: Some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity.

tab_title_template "{title}"

#: A template to render the tab title. The default just renders the
#: title. If you wish to include the tab-index as well, use something
#: like: {index}: {title}. Useful if you have shortcuts mapped for
#: goto_tab N. In addition you can use {layout_name} for the current
#: layout name and {num_windows} for the number of windows in the tab.
#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example: {fmt.fg.red}red{fmt.fg.default}normal{fmt.bg._00FF00}green
#: bg{fmt.bg.normal}. Similarly, for bold and italic:
#: {fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}.

active_tab_title_template "{fmt.bold}{index}: {title.upper()}{fmt.nobold}"

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.

active_tab_foreground   #1c1c1c
active_tab_background   #fc0317
active_tab_font_style   bold-italic
inactive_tab_foreground #ddeedd
inactive_tab_background #8B0000
inactive_tab_font_style normal

#: Tab bar colors and styles

tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

#: }}}

#: Color scheme {{{

foreground #dddddd
background #1c1c1c

#: The foreground and background colors

background_opacity 1

#: The opacity of the background. A number between 0 and 1, where 1 is
#: opaque and 0 is fully transparent.  This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background. This is so that things like the status bar in vim,
#: powerline prompts, etc. still look good.  But it means that if you
#: use a color theme with a background color in your editor, it will
#: not be rendered as transparent.  Instead you should change the
#: default background color in your kitty config and not use a
#: background color in the editor color scheme. Or use the escape
#: codes to set the terminals default colors in a shell script to
#: launch your editor.  Be aware that using a value less than 1.0 is a
#: (possibly significant) performance hit.  If you want to dynamically
#: change transparency of windows set dynamic_background_opacity to
#: yes (this is off by default as it has a performance cost)

background_image none

#: Path to a background image. Must be in PNG format.

background_image_layout tiled

#: Whether to tile or scale the background image.

background_image_linear no

#: When background image is scaled, whether linear interpolation
#: should be used.

dynamic_background_opacity no

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.

background_tint 0.0

#: How much to tint the background image by the background color. The
#: tint is applied only under the text area, not margin/borders. Makes
#: it easier to read the text. Tinting is done using the current
#: background color for each window. This setting applies only if
#: background_opacity is set and transparent windows are supported or
#: background_image is set.

dim_opacity 0.75

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

selection_foreground #1c1c1c

#: The foreground for text selected with the mouse. A value of none
#: means to leave the color unchanged.

selection_background #4d4d4d

#: The background for text selected with the mouse.


#: The 16 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version. You can also set the remaining colors from
#: the 256 color table as color16 to color255.

color0 #000000
color8 #767676

#: black

color1 #cc0403
color9 #f2201f

#: red

color2  #19cb00
color10 #23fd00

#: green

color3  #cecb00
color11 #fffd00

#: yellow

color4  #0d73cc
color12 #1a8fff

#: blue

color5  #cb1ed1
color13 #fd28ff

#: magenta

color6  #0dcdcd
color14 #14ffff

#: cyan

color7  #dddddd
color15 #ffffff

#: white

mark1_foreground black

#: Color for marks of type 1

mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

mark2_foreground black

#: Color for marks of type 2

mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

mark3_foreground black

#: Color for marks of type 3

mark3_background #f274bc

#: Color for marks of type 1 (violet)

#: }}}

#: Advanced {{{

# shell .

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login to ensure that the shell starts in interactive mode and
#: reads its startup rc files.

# editor .

#: The console editor to use when editing the kitty config file or
#: similar tasks. A value of . means to use the environment variables
#: VISUAL and EDITOR in that order. Note that this environment
#: variable has to be set not just in your shell startup scripts but
#: system-wide, otherwise kitty will not see it.

# close_on_child_death no

#: Close the window when the child process (shell) exits. If no (the
#: default), the terminal will remain open when the child exits as
#: long as there are still processes outputting to the terminal (for
#: example disowned or backgrounded processes). If yes, the window
#: will close as soon as the child process exits. Note that setting it
#: to yes means that any background processes still using the terminal
#: can fail silently because their stdout/stderr/stdin no longer work.

# allow_remote_control no

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty.

# listen_on none

#: Tell kitty to listen to the specified unix/tcp socket for remote
#: control connections. Note that this will apply to all kitty
#: instances. It can be overridden by the kitty --listen-on command
#: line flag. This option accepts only UNIX sockets, such as
#: unix:${TEMP}/mykitty or (on Linux) unix:@mykitty. Environment
#: variables are expanded. If {kitty_pid} is present then it is
#: replaced by the PID of the kitty process, otherwise the PID of the
#: kitty process is appended to the value, with a hyphen. This option
#: is ignored unless you also set allow_remote_control to enable
#: remote control. See the help for kitty --listen-on for more
#: details.

# env 

#: Specify environment variables to set in all child processes. Note
#: that environment variables are expanded recursively, so if you
#: use::

#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b

#: The value of MYVAR2 will be a/<path to home directory>/b.

# update_check_interval 24

#: Periodically check if an update to kitty is available. If an update
#: is found a system notification is displayed informing you of the
#: available update. The default is to check every 24 hrs, set to zero
#: to disable.

# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded.

# clipboard_control write-clipboard write-primary

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary. You can additionally specify no-append to
#: disable kitty's protocol extension for clipboard concatenation. The
#: default is to allow writing to the clipboard and primary selection
#: with concatenation enabled. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.

allow_hyperlinks yes

#: Process hyperlink (OSC 8) escape sequences. If disabled OSC 8
#: escape sequences are ignored. Otherwise they become clickable
#: links, that you can click by holding down ctrl+shift and clicking
#: with the mouse. The special value of ``ask`` means that kitty will
#: ask before opening the link.

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work.

#: }}}

#: OS specific tweaks {{{

# 在macOS上更改kitty窗口标题栏的颜色。 
# system的值表示使用默认的系统颜色，background的值表示使用当前活动窗口的背景颜色，最后可以使用任意颜色
# 例如#12af59或红色。 警告：由于没有适当的Cocoa API，因此该选项可通过使用hack来工作。 
# 它设置整个窗口的背景色并使标题栏透明。 因此，它与background_opacity不兼容。
# 如果要同时使用两者，则最好使用hide_window_decorations隐藏标题栏。
macos_titlebar_color hide_window_decorations

# 使用选项键作为alt键。 将此设置为no时，kitty将使用macOS本机的Option + Key = unicode字符行为。
# 这将破坏终端程序中的所有Alt + key键盘快捷键，但您可以使用macOS unicode输入技术。
# 您可以使用以下值：left，right或两者，以仅将left，right或两个Option键用作Alt。
macos_option_as_alt yes

# 隐藏macOS上正在运行的任务（Option + Tab）的kitty窗口。
macos_hide_from_tasks no

macos_hide_titlebar no
# 当所有顶层窗口关闭时，让小猫退出。默认情况下，即使没有打开的窗口，小猫也会继续运行，就像macOS上的预期行为一样。
macos_quit_when_last_window_closed yes

# 如果您希望在 macOS 上无法调整大小，使用no
macos_window_resizable yes

# 在给定宽度的字体周围绘制额外的边框，以增加小字体大小的可读性。
# 例如，0.75的值将导致渲染在公共字体大小下看起来像亚像素抗锯齿。 
macos_thicken_font 0

# 使用传统的全屏过渡，速度更快，但不那么漂亮。
macos_traditional_fullscreen no

# 在macOS窗口或菜单栏中显示或隐藏窗口标题。 
# window 将在macOS窗口顶部显示当前活动窗口的标题。 
# menubar 将在macOS菜单栏中显示当前活动窗口的标题，并利用否则浪费的空间。
# all 将在所有位置显示标题，并且没有一个将标题隐藏在窗口和菜单栏中。
macos_show_window_title_in window

# 启用/禁用适用于 macOS 的自定义鼠标光标，在明暗背景上都更容易看到。
# 警告：这可能会使您的鼠标光标在双GPU机器上不可见。
macos_custom_beam_cursor no

# 在Wayland和X11后端之间选择。 默认情况下，会根据系统状态自动选择适当的后端。 将其设置为x11或wayland以强制选择。
linux_display_server auto

#: }}}

#: Keyboard shortcuts {{{

#: For a list of key names, see: the GLFW key macros
#: <https://github.com/kovidgoyal/kitty/blob/master/glfw/glfw3.h#L349>.
#: The name to use is the part after the GLFW_KEY_ prefix. For a list
#: of modifier names, see: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you can only use an XKB key
#: name for keys that are not known as GLFW keys.

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-keyboard option.
#: Then kitty will output some debug text for every key event. In that
#: text look for ``native_code`` the value of that becomes the key
#: name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

# kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# clear_all_shortcuts no

#: You can have kitty remove all shortcut definition seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

# kitten_alias hints hints --hints-offset=0

#: You can create aliases for kitten names, this allows overriding the
#: defaults for kitten options and can also be used to shorten
#: repeated mappings of the same kitten with a specific group of
#: options. For example, the above alias changes the default value of
#: kitty +kitten hints --hints-offset to zero for all mappings,
#: including the builtin ones.

#: Clipboard {{{

# map kitty_mod+c copy_to_clipboard

#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise. Similarly, copy_and_clear_or_interrupt
#: will copy and clear the selection or send an interrupt if there is
#: no selection.

# map cmd+c        copy_to_clipboard
# map kitty_mod+v  paste_from_clipboard
# map cmd+v        paste_from_clipboard
# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection
# map kitty_mod+o  pass_selection_to_program

#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, the selection
#: will be passed as a command line argument to the program, for
#: example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

# map kitty_mod+up        scroll_line_up
# map alt+cmd+page_up     scroll_line_up
# map cmd+up              scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map alt+cmd+page_down   scroll_line_down
# map cmd+down            scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map cmd+page_up         scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map cmd+page_down       scroll_page_down
# map kitty_mod+home      scroll_home
# map cmd+home            scroll_home
# map kitty_mod+end       scroll_end
# map cmd+end             scroll_end
# map kitty_mod+h         show_scrollback

#: You can pipe the contents of the current screen + history buffer as
#: STDIN to an arbitrary program using the ``launch`` function. For
#: example, the following opens the scrollback buffer in less in an
#: overlay window::

#:     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#: For more details on piping screen and buffer contents to external
#: programs, see launch.

#: }}}

#: Window management {{{

# map kitty_mod+enter new_window

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      launch mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    launch --cwd=current

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter launch --allow-remote-control some_program

#: You can open a new window next to the currently active window or as
#: the first window, with::

#:     map ctrl+n launch --location=neighbor some_program
#:     map ctrl+f launch --location=first some_program

#: For more details, see launch.

# map cmd+enter   new_window
# map kitty_mod+n new_os_window

#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.

map cmd+n       new_os_window
# map kitty_mod+w close_window
# map shift+cmd+d close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window
# map kitty_mod+1 first_window
# map cmd+1       first_window
# map kitty_mod+2 second_window
# map cmd+2       second_window
# map kitty_mod+3 third_window
# map cmd+3       third_window
# map kitty_mod+4 fourth_window
# map cmd+4       fourth_window
# map kitty_mod+5 fifth_window
# map cmd+5       fifth_window
# map kitty_mod+6 sixth_window
# map cmd+6       sixth_window
# map kitty_mod+7 seventh_window
# map cmd+7       seventh_window
# map kitty_mod+8 eighth_window
# map cmd+8       eighth_window
# map kitty_mod+9 ninth_window
# map cmd+9       ninth_window
# map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

# map kitty_mod+right next_tab
# map ctrl+tab        next_tab
# map shift+cmd+]     next_tab
# map kitty_mod+left  previous_tab
# map shift+ctrl+tab  previous_tab
# map shift+cmd+[     previous_tab
# map kitty_mod+t     new_tab
# map cmd+t           new_tab
# map kitty_mod+q     close_tab
# map cmd+w           close_tab
# map shift+cmd+w     close_os_window
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

# map kitty_mod+equal     change_font_size all +2.0
# map cmd+plus            change_font_size all +2.0
# map cmd+shift+equal     change_font_size all +2.0
# map kitty_mod+minus     change_font_size all -2.0
# map cmd+minus           change_font_size all -2.0
# map kitty_mod+backspace change_font_size all 0
# map cmd+0               change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

# map kitty_mod+p>n kitten hints --type linenum

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.

# map kitty_mod+p>y kitten hints --type hyperlink

#: Select a hyperlink (i.e. a URL that has been marked as such by the
#: terminal program, for example, by ls --hyperlink=auto).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen::

#:     map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

# }}}

# 搜索🔍
map kitty_mod+/ launch --location=hsplit --allow-remote-control kitty +kitten search.py @active-kitty-window-id

# 翻页快捷键
map shift+up        kitten smart_scroll.py scroll_line_up   shift+up
map shift+down      kitten smart_scroll.py scroll_line_down shift+down
map shift+page_up   kitten smart_scroll.py scroll_page_up   shift+page_up
map shift+page_down kitten smart_scroll.py scroll_page_down shift+page_down
map ctrl+shift+home kitten smart_scroll.py scroll_home      ctrl+shift+home
map ctrl+shift+end  kitten smart_scroll.py scroll_end       ctrl+shift+end
map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /usr/local/bin/fzf --no-sort --no-mouse --exact -i --tac --border --color 'fg:#bbccdd,fg+:#ff0000,bg:-1,bg+:-1,border:#778899,hl:#FFFC33,hl+:#03BE00,info:#909497,marker:#C70039'

include ./theme.conf
